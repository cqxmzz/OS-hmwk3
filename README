------------
Test Results
------------
Print "%d detected a vertical shake" if only detects shake along x-axis
Print "%d detected a horizonal shake" if only detecs shake along y-axis
Print "%d detected a shake" other cases

Example:

1001 detected a vertical shake
x=0, y=5, z=0, frq=3

---------------------------
User-space Daemon Structure
---------------------------

/*
 *Define time interval (ms)
 */

#define TIME_INTERVAL  200

/*
 * Set current device acceleration in the kernel.
 * The parameter acceleration is the pointer to the address
 * where the sensor data is stored in user space.  Follow system call
 * convention to return 0 on success and the appropriate error value
 * on failure.
 * syscall number 378
 */

int set_acceleration(struct dev_acceleration __user * acceleration);

/*
 * The guide on how to get an instance of the default acceleration
 * sensor is available here.
 */

/*
 * The data structure to be used for passing accelerometer data to the
 * kernel and storing the data in the kernel.
 */

struct dev_acceleration {
        int x; /* acceleration along X-axis */
        int y; /* acceleration along Y-axis */
        int z; /* acceleration along Z-axis */
};


----------------------------------------------------
Acceleration based Synchronization Primitive Pattern
----------------------------------------------------
/*Define the noise*/
#define NOISE 10

/*Define the window*/
#define WINDOW 20

/*
* Define the motion.
* The motion give the baseline for an EVENT.
*/
struct acc_motion {

     unsigned int dlt_x; /* +/- around X-axis */
     unsigned int dlt_y; /* +/- around Y-axis */
     unsigned int dlt_z; /* +/- around Z-axis */

     unsigned int frq;   /* Number of samples that satisfies:
                          sum_each_sample(dlt_x + dlt_y + dlt_z) > NOISE */
};


/* Create an event based on motion.
 * If frq exceeds WINDOW, cap frq at WINDOW.
 * Return an event_id on success and the appropriate error on failure.
 * system call number 379
 */

 int accevt_create(struct acc_motion __user *acceleration);

/* Block a process on an event.
 * It takes the event_id as parameter. The event_id requires verification.
 * Return 0 on success and the appropriate error on failure.
 * system call number 380
 */

 int accevt_wait(int event_id);
 c

/* The acc_signal system call
 * takes sensor data from user, stores the data in the kernel,
 * generates a motion calculation, and notify all open events whose
 * baseline is surpassed.  All processes waiting on a given event
 * are unblocked.
 * Return 0 success and the appropriate error on failure.
 * system call number 381
 */

 int accevt_signal(struct dev_acceleration __user * acceleration);

/* Destroy an acceleration event using the event_id,
 * Return 0 on success and the appropriate error on failure.
 * system call number 382
 */

 int accevt_destroy(int event_id);
